<%- include('partials/header', {title: 'Live Chat - HeroPixel Network'}) %>

<div class="flex min-h-screen bg-gray-900">
    <%- include('partials/sidebar', {user: user, currentPage: 'chat'}) %>
    
    <!-- Main Content -->
    <div class="flex-1 lg:ml-64 flex flex-col">
        <!-- Chat Header -->
        <div class="bg-gray-800 border-b border-gray-700 p-4">
            <h1 class="text-xl font-bold text-white">Live Chat</h1>
            <p class="text-gray-400 text-sm">Connected as <%= user.username %></p>
        </div>

        <!-- Chat Messages -->
        <div class="flex-1 overflow-hidden flex flex-col">
            <div id="chatMessages" class="flex-1 overflow-y-auto p-4 space-y-3 bg-gray-900">
                <% messages.forEach(function(message) { %>
                <div class="message-bubble bg-gray-800 rounded-lg p-3 border border-gray-700">
                    <div class="flex items-center justify-between mb-2">
                        <span class="font-medium text-blue-400"><%= message.username %></span>
                        <span class="text-xs text-gray-400">
                            <%= new Date(message.timestamp).toLocaleString() %>
                        </span>
                    </div>
                    <p class="text-gray-300 break-words"><%= message.message %></p>
                </div>
                <% }); %>
            </div>

            <!-- Message Input -->
            <div class="bg-gray-800 border-t border-gray-700 p-4">
                <form id="chatForm" class="flex space-x-2">
                    <input 
                        type="text" 
                        id="messageInput" 
                        placeholder="Type your message..."
                        class="flex-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        maxlength="500"
                        required
                    >
                    <button 
                        type="submit"
                        class="px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
                        id="sendButton"
                    >
                        Send
                    </button>
                </form>
                <p class="text-xs text-gray-400 mt-2">Press Enter to send â€¢ Max 500 characters</p>
            </div>
        </div>
    </div>
</div>

<!-- Socket.IO and Chat JavaScript -->
<script src="https://cdn.socket.io/4.7.4/socket.io.min.js"></script>
<script>
    const socket = io();
    const chatMessages = document.getElementById('chatMessages');
    const chatForm = document.getElementById('chatForm');
    const messageInput = document.getElementById('messageInput');
    const sendButton = document.getElementById('sendButton');

    // Auto-scroll to bottom
    function scrollToBottom() {
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    // Initial scroll to bottom
    scrollToBottom();

    // Listen for new messages from server
    socket.on('newMessage', function(data) {
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message-bubble bg-gray-800 rounded-lg p-3 border border-gray-700';
        
        const timestamp = new Date(data.timestamp).toLocaleString();
        
        messageDiv.innerHTML = `
            <div class="flex items-center justify-between mb-2">
                <span class="font-medium text-blue-400">${escapeHtml(data.username)}</span>
                <span class="text-xs text-gray-400">${timestamp}</span>
            </div>
            <p class="text-gray-300 break-words">${escapeHtml(data.message)}</p>
        `;
        
        chatMessages.appendChild(messageDiv);
        scrollToBottom();
    });

    // Send message
    chatForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const message = messageInput.value.trim();
        if (!message) return;

        // Disable send button temporarily
        sendButton.disabled = true;
        sendButton.textContent = 'Sending...';

        try {
            const response = await fetch('/chat/send', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ message: message })
            });

            const result = await response.json();
            
            if (result.success) {
                messageInput.value = '';
            } else {
                alert('Failed to send message: ' + (result.error || 'Unknown error'));
            }
        } catch (error) {
            alert('Failed to send message: ' + error.message);
        } finally {
            sendButton.disabled = false;
            sendButton.textContent = 'Send';
            messageInput.focus();
        }
    });

    // Enter key shortcut
    messageInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            chatForm.dispatchEvent(new Event('submit'));
        }
    });

    // Focus input on load
    messageInput.focus();

    // Escape HTML to prevent XSS
    function escapeHtml(text) {
        const map = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#039;'
        };
        return text.replace(/[&<>"']/g, function(m) { return map[m]; });
    }

    // Show typing indicator (optional enhancement)
    let typingTimer;
    messageInput.addEventListener('input', function() {
        clearTimeout(typingTimer);
        // Could emit typing event here
        typingTimer = setTimeout(() => {
            // Could emit stopped typing event here
        }, 1000);
    });
</script>

<%- include('partials/footer') %>